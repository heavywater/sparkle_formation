#!/usr/bin/env ruby

%w(bogo multi_json nokogiri fileutils).each do |lib|
  begin
    require lib
  rescue LoadError
    $stderr.puts "Failed to load required library: `#{lib}` !"
    $stderr.puts "  > gem install #{lib}"
    exit -1
  end
end

STORE = "/tmp/aws-cfn-docs"

UPDATE_MAPPING = {
  "replacement" => :replacement,
  /(no|without) interruption/ => :none,
  /(?<!no|without) interruption/ => :interrupt,
  "not supported" => :unavailable,
}

unless (File.directory?(STORE))
  FileUtils.mkdir_p(STORE)
  Dir.chdir(STORE) do
    unless (system('wget -q -r -l 3 -A "aws-resource-*" "https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-template-resource-type-ref.html"'))
      puts "FAILED: Documentation fetching failed!"
      exit -1
    end
  end
end

aws_resources = {}
multiple_update_causes = Smash.new

Dir.glob(File.join(STORE, "**/*.html")).each do |path|
  resource = nil
  begin
    file = Nokogiri::HTML(File.open(path, "r"))
    type = file.css("h1.topictitle").text.strip
    if (type.include?(" "))
      next
    end
    resource = file.css("div#main-col-body").detect do |section|
      section.children.any? do |child|
        #        child.get_attribute(:class) == 'titlepage' &&
        child.text.include?("Properties")
      end
    end
    property_information = {}
    if (resource)
      names = []
      infos = []
      resource = resource.css("div.variablelist").first
      if resource
        names = resource.children.detect { |r| r.name == "dl" }.children.find_all { |r| r.name == "dt" }.map(&:text).map(&:strip)
        infos = resource.children.detect { |r| r.name == "dl" }.children.find_all { |r| r.name == "dd" }
        unless (names.size == infos.size)
          raise "Failed to align resource properties with information - #{type} (#{path})"
        end
      end
      names.each_with_index do |name, idx|
        info = infos[idx]
        base_type = info.css("p").map(&:text).detect do |x|
          x.include?("Type")
        end || "String"
        if (base_type.downcase.match(/(\s|^)list(\s|$)/))
          p_type = "Array"
        elsif (base_type.include?("Type: String"))
          p_type = "String"
        elsif (base_type.include?("Type: Boolean"))
          p_type = "Boolean"
        elsif (base_type.include?("Type: Integer"))
          p_type = "Number"
        elsif (base_type.include?("Type:") && base_type.include?("JSON") && base_type.include?("document"))
          p_type = "JSON"
        else
          p_type = "Unknown"
        end
        required = !!info.css("p").map(&:text).detect do |x|
          x.include?("Required:") && x.include?("Yes")
        end
        description = info.css("p").first.text.strip.split("\n").map(&:strip).join(" ")
        full_text = info.text.downcase
        if (full_text.include?("updates are not supported") || full_text.include?("cannot update this property"))
          update_causes = :unavailable
        elsif (full_text.include?("update causes interrupt"))
          update_causes = :interrupt
        end
        links = info.css("a").map(&:text).map(&:downcase)
        update_causes_map = UPDATE_MAPPING.map do |match, value|
          value if links.any? { |a| a.match(match) } #include?(match)}
        end.compact
        if (update_causes && !update_causes_map.empty?)
          update_causes = [update_causes] + update_causes_map
        elsif (update_causes.nil? && !update_causes_map.empty?)
          update_causes = update_causes_map.size > 1 ? update_causes_map : update_causes_map.first
        end
        update_causes = :unknown unless update_causes
        if (update_causes.is_a?(Array))
          $stderr.puts "Multiple update_causes values detected! Resource: #{type} Property: #{name} -> #{update_causes.inspect}"
          multiple_update_causes[type] ||= []
          multiple_update_causes[type] << name
        end

        property_information[name] = {
          :description => description,
          :required => required,
          :type => p_type,
          :update_causes => update_causes,
        }
      end
      aws_resources[type] = {
        :properties => names,
        :full_properties => property_information,
      }
    else
      resource = file.css("div.informaltable")
      if (resource)
        aws_resources[type] = {
          :properties => resource.css("tr").map { |tr|
            item = tr.css("td").first
            item ? item.text.strip : nil
          }.compact,
        }
      else
        next
      end
    end
    aws_resources[type][:path] = File.basename(path)
  end
end

file_path = File.join(File.dirname(File.dirname(__FILE__)),
                      "lib", "sparkle_formation", "resources", "aws_resources.json")
$stdout.puts "Writing resource file: #{file_path}"
File.open(file_path, "w+") do |file|
  file.puts MultiJson.dump(aws_resources.to_smash(:sorted), :pretty => true)
end

unless (multiple_update_causes.empty?)
  $stderr.puts "--------------------------------------------------------"
  $stderr.puts "Resource properties detected with multiple update states"
  $stderr.puts "--------------------------------------------------------"
  $stderr.puts MultiJson.dump(multiple_update_causes.to_smash(:sorted).tap { |h| h.values.map(&:sort!) }, :pretty => true)
end
